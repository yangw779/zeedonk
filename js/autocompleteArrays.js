var moduleDescriptions = {
	Gfx:"For drawing and manipulating shapes and images.",
	Col:"So many colors!",
	Font:"All the fonts you can use (for use with <b>Text</b> functions).",
	Text:"For displaying text on screen :D",
	Music:"For all your music and sound needs.",
	Key:"A list of all of the key names. For use with <b>Input</b> functions.",
	Input:"Responding to key presses!",
	Mouse:"Checking out mouse movement and clicks.",
	Convert:"Strings to ints to floats and back again.",
	Random:"",
	Game:"House-keeping",
	Math:"",
	String:'<p>The basic String class.<p>A haxe String is immutable: it is not possible to modify individual characters.<p>You can access individual characters by using array notation, so "cat"[1] is "a".',
	Array:"[1,2,3] and all that jazz."
};

var haxeLibraryArray = [
["Gfx",".","M"],
["Col",".","E"],
["Font",".","E"],
["Text",".","M"],
["Music",".","M"],
["Key",".","E"],
["Input",".","M"],
["Mouse",".","M"],
["Convert",".","M"],
["Random",".","M"],
["Game",".","M"],
["Math",".","M"],
["String",".","M"],
["trace","(message)","F"],
["function ",""],
["break",";"],
["case "],
["continue",";"],
["default",":"],
["new"],
["do"],
["else"],
["false"],
["true"],
["for ",""],
["if"],
["in"],
["null"],
["switch "],
["var "],
["while"],
["return "],
//putting a space after the brackets below stops autocomplete from inserting a semicolon
["update","() ","F","This function will be called every frame by the engine if you define it."]
];


var haxeMethodArray = [
	["String.length",":Int","M_P","The number of characters."],
	["String.charAt","(index:Int):String","M_F",'The character at position index.<p>If index is negative or more than this.length, it returns "".<p>(This isn\'t really necessary because you can use array access to access characters - "doge"[2] returns "g", for instance.)' ],
	["String.charCodeAt","(index:Int):Int","M_F","The character code at position index of this String - an integer that corresponds to the character there.<p>If you pass a value that's too big, or negative, this returns null."],
	["String.concat","(string2:String, [...] ):String","M_F","Joins two or more strings together. You can also just add them, like 'cat'+'dog'."],
	["String.indexOf","(str:String, startIndex:Int = 0):Int","M_F","Returns the position of the first occurence of str within this String.<p>If str cannot be found, -1 is returned.<p>If startIndex is given, it searches starting from startIndex. Otherwise the search is performed from the beginning. Either way, the returned position is relative to the beginning."],
	["String.lastIndexOf","(str:String, startIndex:Int = str.length-1):Int","M_F",'Returns the position of the last occurence of str within this String.<p>If str cannot be found, -1 is returned.<p>If startIndex is given, the search is performed within the substring of this String from 0 to startIndex. In either case, the returned position is relative to the beginning.'],
	["String.replace","(oldSubString:String,newSubString:String):String","M_F","Returns a new string with the first occurence of the given substring replaced by the new string :D (also, yep, it's case-sensitive)."],
	["String.slice","(beginSlice:Int,endSlice:Int = [see docs] ):String","M_F","The slice() method returns an excerpt of the old string. It doesn't modify the old string. <p>If beginSlice is negative, it is treated as sourceLength + beginSlice where sourceLength is the length of the string.<p>endSlice is the index at which to stop (otherwise slice extracts to the end of the string). If it's negative, it is treated as this.length + endSlice (e.g. if endSlice is -2 it's the same as passing str.length - 2)."],	
	["String.split","(delimiter:String, limit=infinite):Array<String>","M_F",'Splits a string into an array of substrings by splitting the string wherever the "delimiter" character occurs. If a limit is passed, the returned array will be truncated to have no more than limit elements.'],	
	["String.substr","(pos:Int, len:Int = this.length-pos):String","M_F",'Returns a substing, starting at pos, and of length len.<p>If you don\'t pass a length, it\'ll give you the whole remainder of the string from the starting point.<p>If pos is negative, its value is calculated from the end of this String by this.length + pos. If this yields a negative value, 0 is used instead.<p>If the calculated position + len exceeds this.length, the characters from that position to the end of this String are returned.<p>If len is negative, the result is unspecified.'],
	["String.toLowerCase","():String","M_F",'Returns a lower-case version of this string.'],
	["String.toString","():String","M_F","Returns the string itself.<p>A bit dumb out of context, but the idea is that you can call toString() on anything without having to worry about its type."],
	["String.toUpperCase","():String","M_F",'Returns an lower-case version of this string.'],
	["String.trim","():String","M_F",'Returns a new string with all the whitespace (spaces, tabs, newlines, &c.) at the beginning/end removed.'],

	["Array.length",":Int","M_P","Returns the length of the array."],
	["Array.concat","(a:Array):Array","M_F",'[1,2,3].concat([4,5,6])=[1,2,3,4,5,6]. This creates a new array - it doesn\'t modify the old ones. (If you want to duplicate an array, a.concat([]) is a good way of doing this!)'],
	["Array.every","(callback : S -> Bool):Bool","M_F","The function is applied to elements of the array until either one returns false, or it has been applied to all (in which case it returns true)."],	
	["Array.filter","(f:T ‑> Bool):Array<T>","M_F","Applies the function to all elements of the array, and if it returns true, adds it to the return array."],
	["Array.indexOf","(x:T, fromIndex:Int = 0):Int","M_F","Returns the index of the first occurrence of x in the array.<p>If it's not found, returns -1.  If fromIndex is supplied, it will start its search from this point and move right. If fromIndex is negative, it's treated as \"this.length-fromIndex\"."],
	["Array.join","(sep:String):String","M_F",'["a","b","c"].join("z") is "azbzc".  More gnerally, [a,b,c].join("s") returns a.toString()+"s"+b.toString()+"s"+c.toString(). etc.'],
	["Array.lastIndexOf","(x:T, fromIndex:Int = this.length-1):Int","M_F",'Returns the index of the last occurence of x in the Array, searching right to left.<p>If x is not found, the function returns -1.<p>If fromIndex is given, it will start from this point and go left, otherwise it starts from the last element. If it\'s negative, it\'s as if you passed \"this.length-fromIndex\".'],
	["Array.map","(f:S ‑> T):Array<T>","M_F","Applies the function to all elements of the array, and creates a new array from the results (in the same order)."],
	["Array.pop","():T","M_F",'Removes the last element of the array and returns it.  This modifies the source array.'],
	["Array.push","(x:T, [y:T,...]):Int","M_F",'Appends the passed things to the end of the array, and returns the new length.  This modifies the source array.<p>'],
	["Array.reverse","()","M_F",'Reverse the order of elements of this Array.<p>This modifies the array.'],
	["Array.shift","()","M_F",'Removes the first element of the array and returns it.<p>This modifies the array.'],
	["Array.slice","(pos:Int, end:Int = this.length):Array","M_F",'Creates a new array with elements from the old one starting from pos, and up to (but not including) end.<p>The elements themselves are not copied.<p>If you don\'t give an end it\'ll go to the end of the array. If the either of the arguments are negative, counts back from the end of the array (this.length + pos, this.length + end).'],
	["Array.some","(callback : S -> Bool):Bool","M_F","The function's applied to each of the elements until one returns true, in which case it returns true, or all have returned false, in which case it returns false."],
	["Array.sort","(compareFunction = defaultCompare)","M_F",'Sorts the elements of the array using the \'<\' operator - if you supply your own comparison function that\'s used instead.'],
	["Array.splice","(pos:Int, len:Int):Array","M_F","Removes len elements from the array, starting at pos, returning the elements removed in an array.<p>This modifies the array. <p>If len is negative, or too large large, an empty array is returned<p>If pos is negative, it's treated as this.length-pos.  <p> If len+pos>this.length, then it will remove until the end of the array.<p>Super useful for removing elements from an array, if you know the index."],
	["Array.toString","():String","M_F","Makes a string representation of the array."],
	["Array.unshift","(x:T)","M_F",'Adds x to the start of the array.<p> This modifies the array.'],
];

var haxeHintArray = [

["Gfx.clearscreen","(color)","F"],
["Gfx.clearscreeneachframe",":Bool","P"],
["Gfx.drawbox","(x, y, width, height, col)","F"],
["Gfx.fillbox","(x, y, width, height, col)","F"],
["Gfx.drawtri","(x1, y1, x2, y2, x3, y3, col)","F"],
["Gfx.filltri","(x1, y1, x2, y2, x3, y3, col)","F"],
["Gfx.drawcircle","(x, y, radius, col)","F"],
["Gfx.fillcircle","(x, y, radius, col)","F"],
["Gfx.drawhexagon","(x, y, radius, angle, col)","F"],
["Gfx.fillhexagon","(x, y, radius, angle, col)","F"],
["Gfx.drawline","(x1, y1, x2, y2, col)","F"],
["Gfx.linethickness",":Float","P"],
["Gfx.getpixel","(x, y)","F"],
["Gfx.setpixel","(x, y, col):Int","F"],
["Gfx.rgb","(red [0-255], green [0-255], blue [0-255] ):Int","F","Converts a color with given red, green, and blue values (between 0-255 each) to a single hex number."],
["Gfx.hsl","(hue [0-0], saturation [0-1.0], lightness [0-1.0] ):Int","F","Converts a color with given hue (0-360), saturation [0-1], and lightness [0-1] values to a single hex number."],
["Gfx.getred","(col):Int","F","Returns the red component of a hex color (Between 0-255 inclusive)."],
["Gfx.getgreen","(col):Int","F","Returns the green component of a hex color (Between 0-255 inclusive)."],
["Gfx.getblue","(col):Int","F","Returns the blue component of a hex color (Between 0-255 inclusive)."],
["Gfx.gethue","(col):Int","F","Returns the hue (0-360) value of a color."],
["Gfx.getsaturation","(col):Float","F","Returns the saturation (0.0-1.0) value of a color."],
["Gfx.getlightness","(col):Int","F","Returns the lightness (0.0-1.0) value of a color."],
["Gfx.screenwidth",":Int","P"],
["Gfx.screenheight",":Int","P"],
["Gfx.screenwidthmid",":Int","P","Returns screen width divided by two."],
["Gfx.screenheightmid",":Int","P","Returns screen height divided by two."],
["Gfx.drawimage","(x, y, imagename)","F"],
["Gfx.imagewidth","(imagename):Int","P"],
["Gfx.imageheight","(imagename):Int","P"],
["Gfx.loadimagestring","(imagename, imagestring, optional color1, color2, color3, color4) ","F"],
["Gfx.createimage","(imagename, width, height) ","F"],
["Gfx.resizeimage","(imagename, scale)","F"],
["Gfx.drawtoscreen","()","F"],
["Gfx.drawtoimage","(imagename)","F"],
["Gfx.grabimagefromscreen","(imagename, screen x, screen y)","F","This function grabs a copy of the screen from position x,y, and places it in the image."],
["Gfx.grabimagefromimage","(imagename, sourceimagename, image x, image y, imagewidth=w, imageheight=h)","F", "Imagewidth and Imageheight are optional parameters. If left out, the function will use the width and height of the destination image."],
["Gfx.showfps",":Bool","P","Whether or not to show the fps counter."],
["Gfx.rotation","(angle:Float, xpivot=Gfx.CENTER, ypivot=Gfx.CENTER)","F","Rotates image drawing functions. Optionally set rotation pivot point."],
["Gfx.scale","(xscale, yscale, xpivot=Gfx.CENTER, ypivot=Gfx.CENTER)","F","Scales image drawing functions, as it's being drawn. Optionally set scaling pivot point."],
["Gfx.imagecolor","(c:Int = Col.WHITE)","F","Set a colour multipler in RGB for image drawing functions. Leave parameter blank to return to normal."],
["Gfx.CENTER","","P"],
["Gfx.LEFT","","P"],
["Gfx.RIGHT","","P"],
["Gfx.TOP","","P"],
["Gfx.BOTTOM","","P"],
["Col.BLACK","","Col"],
["Col.GREY","","Col"],
["Col.WHITE","","Col"],
["Col.RED","","Col"],
["Col.PINK","","Col"],
["Col.DARKBROWN","","Col"],
["Col.BROWN","","Col"],
["Col.ORANGE","","Col"],
["Col.YELLOW","","Col"],
["Col.DARKGREEN","","Col"],
["Col.GREEN","","Col"],
["Col.LIGHTGREEN","","Col"],
["Col.NIGHTBLUE","","Col"],
["Col.DARKBLUE","","Col"],
["Col.BLUE","","Col"],
["Col.LIGHTBLUE","","Col"],
["Col.MAGENTA","","Col"],
["Col.TRANSPARENT","","Col"],
["Font.C64","","E","<img src='images/fonts/Font_C64.png'><br />(This font is monospace.)"],
["Font.COMIC","","E","<img src='images/fonts/Font_COMIC.png'>"],
["Font.CRYPT","","E","<img src='images/fonts/Font_CRYPT.png'><br />(This font is monospace.)"],
["Font.DEFAULT","","E","<img src='images/fonts/Font_DEFAULT.png'>"],
["Font.DOS","","E","<img src='images/fonts/Font_DOS.png'><br />(This font is monospace.)"],
["Font.GANON","","E","<img src='images/fonts/Font_GANON.png'>"],
["Font.NOKIA","","E","<img src='images/fonts/Font_NOKIA.png'>"],
["Font.OLDENGLISH","","E","<img src='images/fonts/Font_OLDENGLISH.png'>"],
["Font.PIXEL","","E","<img src='images/fonts/Font_PIXEL.png'><br />(This font is monospace.)"],
["Font.PRESSSTART","","E","<img src='images/fonts/Font_PRESSSTART.png'><br />(This font is monospace.)"],
["Font.RETROFUTURE","","E","<img src='images/fonts/Font_RETROFUTURE.png'>"],
["Font.ROMAN","","E","<img src='images/fonts/Font_ROMAN.png'>"],
["Font.SPECIAL","","E","<img src='images/fonts/Font_SPECIAL.png'>"],
["Font.THIN","","E","<img src='images/fonts/Font_THIN.png'>"],
["Font.TINY","","E","<img src='images/fonts/Font_TINY.png'><br />(This font is monospace.)"],
["Font.YOSTER","","E","<img src='images/fonts/Font_YOSTER.png'>"],
["Font.ZERO4B11","","E","<img src='images/fonts/Font_ZERO4B11.png'>"],
["Text.setfont","(fontname:Font, size:Float = 1)","F","Type Font. to see a list of fonts in autocomplete!"],
["Text.changesize","(fontsize)","F","Change the size of the font. 1 is normal, 2 is double size, 3 is triple, etc."],
["Text.display","(x, y, text, col)","F","Draws text on the screen at a given coordinate."],
["Text.input",'(x, y, "Question: ", Q colour, A colour):Bool',"F"],
["Text.getinput","():String","F"],
["Text.inputsound",":Int","P","Sets a sound to play while typing in Text.input(). For no sound, set to -1."],
["Text.inputmaxlength",":Int","P","Sets maximum response length of Text.input()."],
["Text.rotation","(angle:Float)","F","Sets the rotation of the next Text.display() command."],
["Text.align","(position)","F","Sets the alignment for the next Text.display() command. Pass either Text.LEFT, Text.CENTER or Text.RIGHT."],
["Text.CENTER","","P"],
["Text.LEFT","","P"],
["Text.RIGHT","","P"],
["Text.TOP","","P"],
["Text.BOTTOM","","P"],
["Text.height","():Float","F"],
["Text.len","(t:String):Float","F"],
["Music.playsound","(seed, volume [0-1] )","F"],
["Music.playnote","(seed,pitch,length,volume [0-1] )","F"],
["Music.playmusic","(musicDat)","F"],
["Music.stopmusic","()","F"],
["Music.musicvol",":Float","P","Sets the music volume, must be between 0 and 1 (default is 1)."],
["Music.musicloop",":Bool","P","Should the music loop or not? (defaults to true)"],
["Key.A","","E"],
["Key.B","","E"],
["Key.C","","E"],
["Key.D","","E"],
["Key.E","","E"],
["Key.F","","E"],
["Key.G","","E"],
["Key.H","","E"],
["Key.I","","E"],
["Key.J","","E"],
["Key.K","","E"],
["Key.L","","E"],
["Key.M","","E"],
["Key.N","","E"],
["Key.O","","E"],
["Key.P","","E"],
["Key.Q","","E"],
["Key.R","","E"],
["Key.S","","E"],
["Key.T","","E"],
["Key.U","","E"],
["Key.V","","E"],
["Key.W","","E"],
["Key.X","","E"],
["Key.Y","","E"],
["Key.Z","","E"],
["Key.ZERO","","E"],
["Key.ONE","","E"],
["Key.TWO","","E"],
["Key.THREE","","E"],
["Key.FOUR","","E"],
["Key.FIVE","","E"],
["Key.SIX","","E"],
["Key.SEVEN","","E"],
["Key.EIGHT","","E"],
["Key.NINE","","E"],
["Key.F1","","E"],
["Key.F2","","E"],
["Key.F3","","E"],
["Key.F4","","E"],
["Key.F5","","E"],
["Key.F6","","E"],
["Key.F7","","E"],
["Key.F8","","E"],
["Key.F9","","E"],
["Key.F10","","E"],
["Key.F11","","E"],
["Key.F12","","E"],
["Key.MINUS","","E"], 
["Key.PLUS","","E"], 
["Key.DELETE","","E"], 
["Key.BACKSPACE","","E"], 
["Key.LBRACKET","","E"],
["Key.RBRACKET","","E"], 
["Key.BACKSLASH","","E"],
["Key.CAPSLOCK","","E"],
["Key.SEMICOLON","","E"],
["Key.QUOTE","","E"],
["Key.COMMA","","E"],
["Key.PERIOD","","E"],
["Key.SLASH","","E"],
["Key.ESCAPE","","E"],
["Key.ENTER","","E"],
["Key.SHIFT","","E"],
["Key.CONTROL","","E"],
["Key.ALT","","E"],
["Key.SPACE","","E"],
["Key.UP","","E"],
["Key.DOWN","","E"],
["Key.LEFT","","E"],
["Key.RIGHT","","E"],
["Input.justpressed","(Key.ENTER):Bool","F","True if the key has been pressed this frame."],
["Input.pressed","(Key.LEFT):Bool","F","True if this key is currently held down."],
["Input.justreleased","(Key.SPACE):Bool","F","True if the key has been released this frame"],
["Input.delaypressed","(Key.Z, 5):Bool","F","True once every N frames, if the key is pressed."],
["Input.getchar","():String","F","Returns the last letter pressed."],
["Mouse.x",":Int","P"],
["Mouse.y",":Int","P"],
["Mouse.leftclick","():Bool","F","True if the button has been clicked this frame."],
["Mouse.leftheld","():Bool","F","True if the button is held down this frame."],
["Mouse.leftreleased","():Bool","F","True if the mouse has been released this frame."],
["Mouse.middleclick","():Bool","F","True if the button has been clicked this frame."],
["Mouse.middleheld","():Bool","F","True if the button is held down this frame."],
["Mouse.middlereleased","():Bool","F","True if the mouse has been released this frame."],
["Mouse.rightclick","():Bool","F","True if the button has been clicked this frame."],
["Mouse.rightheld","():Bool","F","True if the button is held down this frame."],
["Mouse.rightreleased","():Bool","F","True if the mouse has been released this frame."],
["Mouse.mousewheel",":Int","P"],
["Convert.tostring","(1234):String","F"],
["Convert.toint",'("15"):Int',"F","Convert a string or a floating-point number to an integer."],
["Convert.tofloat",'("3.1417826"):Float',"F","Convert a string or an integer to a floating-point number."],
["Random.int","(from, to_inclusive):Int","F"],
["Random.float","(from, to_inclusive):Float","F"],
["Random.string","(length):String","F"],
["Random.bool","():Bool","F","50:50 chance of being true/false"],
["Random.occasional","():Bool","F","True one time in five."],
["Random.rare","():Bool","F","5% chance of being true"],
["Random.chance","(n:int):Bool","F","n% chance of being true"],
["Random.pick","(list:Array<T>):T","F","Picks a random element from an array."],
["Random.pickstring",'("this one", "or this one?", "maybe this one?"):String',"F","Pick between a list of strings. Can list up to 12!"],
["Random.pickint","(5, 14, 72, 92, 1, -723, 8):Int","F","Pick between a list of integers. Can list up to 12!"],
["Random.pickfloat","(5.1, 14.2, 72.3, 92.4, 1.5, -723.6, 8.7):Float","F","Pick between a list of floating-point numbers. Can list up to 12!"],
["Game.title",":String","P","Sets the page header."],
["Game.homepage",":String","P","Set a homepage link to appear in the standalone player."],
["Game.background",":Int","P","Sets color of the background in the standalone player."],
["Game.foreground",":Int","P","Sets color of title text + links in standalone player."],
["Game.prompt","(description,defaultText):String","F"],
["Game.save","(key:String,value:String)","F","Save some data permanently that will persevere even if the game is closed and reopened."],
["Game.load","(key:String):String","F","Load save game data stored with Game.save. Returns null if no key present."],
["Game.editor","():Bool","F","True when a game is in the editor, but false when being played in the player."],
["Game.time",":Int","F","Counter. Incremented by one each frame (30 per second)."],
["Game.restart","()","F","Restarts the game, resetting all variables."],
["Math.PI",":Float","C"],
["Math.abs","(v:Float):Float","F"],
["Math.acos","(v:Float):Float","F"],
["Math.asin","(v:Float):Float","F"],
["Math.atan","(v:Float):Float","F"],
["Math.atan2","(y:Float,x:Float):Float","F"],
["Math.ceil","(v:Float):Int","F"],
["Math.cos","(v:Float):Float","F"],
["Math.exp","(v:Float):Float","F"],
["Math.floor","(v:Float):Int","F"],
["Math.fround","(v:Float):Float","F"],
["Math.log","(v:Float):Float","F"],
["Math.max","(a:Float,b:Float):Float","F"],
["Math.min","(a:Float,b:Float):Float","F"],
["Math.pow","(v:Float,exp:Float):Float","F"],
["Math.round","(v:Float):Int","F"],
["Math.sin","(v:Float):Float","F"],
["Math.sqrt","(v:Float):Float","F"],
["Math.tan","(v:Float):Float","F"],

["String.fromCharCode","(code1:Int, code2:Int, ...):String","F","Makes a string from the list of Unicode values."],
	/*,
["break"],
["case"],
["callback"],
["cast"],
["catch"],
["class"],
["continue"],
["default"],
["do"," expr-loop while( expr-cond );"],
["dynamic"],
["else"],
["enum"],
["extends"],
["extern"],
["false"],
["for","( variable in iterable ) expr-loop;"],
["function"],
["if","( expr-cond ) expr-1 [else expr-2]"],
["implements"],
["import"],
["in"],
["inline"],
["interface"],
["never"],
["new"],
["null"],
["override"],
["package"],
["private"],
["public"],
["return"],
["static"],
["super"],
["switch"],
["this"],
["throw"],
["trace"],
["true"],
["try"],
["typedef"],
["untyped"],
["using"],
["var"],
["while","( expr-cond ) expr-loop;"],
["Int"], 
["Float"], 
["String"], 
["Void"], 
["Bool"], 
["Dynamic"] 
["Array"]*/
];

/*
if you want the hints to be sorted
function compareFn(a,b){
	return a[0].localeCompare(b[0]);
}
haxeHintArray.sort(compareFn);
*/